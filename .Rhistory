{ # we want number 55
num <-sample(urn, 1, F) # sampling of the urn
trials <- trials + 1 # looping the trials until we get the desired output
}
trailsT0100 <- trailsT0100 + trials # updating the number of trials
}
trailsT0100/repetitions
for (i in 1:repetitions)
{
num <- 0 # the sampled number
trials <- 0
while(num != 55)
{ # we want number 55
num <-sample(urn, 1, F) # sampling of the urn
trials <- trials + 1 # looping the trials until we get the desired output
}
trailsT0100 <- trailT0100 + trials # updating the number of trials
}
trailsT0100/repetitions
traceback()
getwd()
17+10+17+16
60/4
24+42
660/10
?solve
a= matrix(c(1,2,3,4,5,6,7,8,9))
a
a= matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)
a
det(a)
?matrix
a= matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3, byrow = T)
a
det(a)
?cat
cat('tushar', ' rathod')
cat('tushar', 'rathod')
a <- matrix(c(3,1,2,1), nrow = 2, ncol = 2)
b <- matrix(c(8,2))
solve(a,b)
?ftable
?table
matrix(1:4, nrow = 4, ncol = 4)
array(1:4, nrow = 4, ncol = 4)
array(1:4, dim = c(4,4))
array(1:4, dim = c(4,4,2))
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(mydata$myrowvar, mydata$mycolvar)
?matrix
str(mtcars)
library('forecast')
a= scan('fancy.dat')
setwd("~/Downloads/R-testing/datasets")
ads = read.csv('Advertising.csv')
names(ads)
ads.lm1 = lm(Sales~., data=ads)
ads.lm1 = step(ads.lm1)
summary(ads.lm1)
bos = read.csv('Boston.csv')
names(bos)
names(ads)
# look at the correlations...
cor(ads)
hist(ads)
plot(ads)
ads.lm3 = lm(Sales~Newspaper+TV, data=ads)
ads.lm3 = step(ads.lm3)
summary(ads.lm3)
bos.lm = lm(medv~., data=bos)
bos.lm = step(bos.lm)
summary(bos.lm)
summary(bos.lm)
summary(ads.lm1)
summary(ads.lm2)
# But, if we had only used Newspaper as a single predictor:
ads.lm2 = lm(Sales~Newspaper, data=ads)
summary(ads.lm2)
summary(ads.lm3)
# R^2
dt = read.csv('delivery-time-gma.csv')
names(dt)
dt.lm1 = lm(dtime~num_cases+distance, data = dt)
summary(dt.lm1)
dt.lm2 = lm(dtime~., data = dt)
summary(dt.lm2)
sum1 = summary(dt.lm1)
sum2 = summary(dt.lm2)
names(sum1)
typeof(sum1)
typeof(sum1[3])
sum1[3]
sum1$r.squared
sum1$r.squared
sum2$r.squared
sum1$adj.r.squared
sum2$adj.r.squared
sum1 = summary(dt.lm1)
summary(ads.lm1)
summary(bos.lm)
ycap = predict(bos.lm, bos)
ycap
cor(bos$medv, ycap)^2
tr = read.csv('Trucks.csv')
names(tr)
head(tr)
?grep
s = '17,768'
gsub(',','',s)
gsub(',','', tr$retailprice)
tr1=gsub(',','', tr$retailprice); head(tr1)
tr1
tr$retailprice = as.numeric(gsub(',', '', tr$retailprice))
head(tr)
tr.lm = lm(resaleval~type+retailprice, data = tr)
summary(tr.lm)
summary(tr.lm)
tr.lm = step(tr.lm)
summary(tr.lm)
summary(tr.lm)
head(tr)
levels(tr$type)
predict(tr.lm, data.frame(type= 'Small Pickup', retailprice=17000))
predict(tr.lm, data.frame(type= 'Full-Size Pickup', retailprice=17000))
predict(tr.lm, data.frame(type= 'Sport Utility', retailprice=17000))
tr.lm
contrasts(tr$type)
tr.lm2 = lm(resaleval~type, data = tr)
tr.lm2 = step(tr.lm2)
summary(tr.lm2)
tr.lm2
predict(tr.lm2, data.frame(type= 'Full-Size Pickup', retailprice=17000))
# (Intercept)   typeSmall Pickup  typeSport Utility
# 60.1              -11.3               -1.5
predict(tr.lm2, data.frame(type= 'Full-Size Pickup', retailprice=17000))
hr = read.csv('house-rents-area1.csv')
hr = read.csv('house-rents-area1.csv')
hr = read.csv('house-rents-area1.csv')
hr = read.csv('house-rents-area.csv')
names(HR)
names(hr)
hr.lm = lm(rentalrates~., data = hr)
hr.lm = step(hr.lm)
summary(hr.lm)
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'))
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'))
hr = read.csv('houserent.csv')
hr = read.csv('hrent.csv')
hr = read.csv('house-rents-area.csv')
hr.lm = lm(rentalrates~., data = hr)
hr.lm = step(hr.lm)
summary(hr.lm)
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'))
hr = read.csv('hrent.csv')
hr = read.csv('house-rents-area.csv')
head(hr)
hr.lm = lm(rentalrates~age+expenses+vac_rate+squarefeet+area, data = hr)
hr.lm = step(hr.lm)
summary(hr.lm)
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'))
confint(hr.lm)
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'),
interval = 'prediction')
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'),
interval = 'prediction',
level = 0.95)
?predict
hr.lm2 = lm(rentalrates~age+expenses+vac_rate+squarefeet, data = hr)
hr.lm2 = step(hr.lm2)
summary(hr.lm2)
summary(hr.lm)
# what is the most important predictor?
summary(hr.lm2)
# what is the most important predictor?
summary(hr.lm2)
# to find the relative importance of data, we scale the data.
hr1 = read.csv('house-rents-area.csv')
scale(hr1)
head(hr1)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet, hr1$area)
names(hr_new)
head(hr_new)
hr_new1 = scale(hr_new)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet)
hr_new1 = scale(hr_new)
typeof(hr_new1)
hr_new1
hr_new1 = as.data.frame(hr_new1)
hr_new1
head(hr_new1)
hr_new1 = as.data.frame(hr_new1)
hr1.lm.s = lm(rentalrates~., data = hr_new1)
hr1.lm.s = lm(hr1.rentalrates~., data = hr_new1)
hr1.lm.s = step(hr1.lm.s)
summary(hr1.lm.s)
auto1 = read.csv('auto.csv')
names(auto1)
auto1.lm = lm(mpg~cylinders+displacement+horsepower+weight+acceleratio, data = auto1)
auto1.lm = lm(mpg~cylinders+displacement+horsepower+weight+acceleration, data = auto1)
auto1.lm = step(auto1.lm)
summary(auto1.lm)
auto1 = read.csv('auto.csv')
names(auto1)
auto1 = auto1[ , -c(1, 8:10)]
names(auto1)
auto1.s = as.data.frame(scale(auto1))
auto1.lm = lm(mpg~., data = auto1.s)
auto1.lm = step(auto1.lm)
summary(auto1.lm)
auto1.lm = step(auto1.lm)
auto1 = read.csv('auto.csv')
names(auto1)
#auto1 = auto1[ , -c(1, 8:10)]
auto1.s = as.data.frame(scale(auto1))
auto1 = auto1[ , -c(1)]
auto1.s = as.data.frame(scale(auto1))
?step
auto1 = read.csv('auto.csv')
names(auto1)
auto1 = auto1[ , -c(1, 8:10)]
auto1.s = as.data.frame(scale(auto1))
auto1.lm = lm(mpg~., data = auto1.s)
auto1.lm = lm(mpg~., data = auto1.s)
n = nrow(auto1.s)
auto1.lm = step(auto1.lm, k=log(n))
getwd()
bl = read.csv("bankloan2.csv")
names(bl)
nrow(bl)	# 850
bl = na.omit(bl)	# need to do this!
nrow(bl)	# 700
bl.glm = glm(default~., data=bl, family=binomial)
summary(bl.glm)
bl.glm = step(bl.glm)
summary(bl.glm)
table(bl$default)
ads = read.csv('Advertising.csv')
names(ads)
ads.lm1 = lm(Sales~., data=ads)
summary(ads.lm1)
ads.lm1 = step(ads.lm1)
summary(ads.lm1)
# But, if we had only used Newspaper as a single predictor:
ads.lm2 = lm(Sales~Newspaper, data=ads)
summary(ads.lm2)
# look at the correlations...
cor(ads)
ads.lm3 = lm(Sales~Newspaper+TV, data=ads)
ads.lm3 = step(ads.lm3)
summary(ads.lm3)
bos = read.csv('Boston.csv')
names(bos)
bos.lm = lm(medv~., data=bos)
bos.lm = step(bos.lm)
summary(bos.lm)
# R^2
dt = read.csv('delivery-time-gma.csv')
names(dt)
dt.lm1 = lm(dtime~num_cases+distance, data = dt)
auto = read.csv('auto.csv')
names(auto)
names(auto)
auto = auto[ ,-1]; names(auto)
auto_lm = lm(mpg~., data=auto); auto_lm
summary(auto_lm)
# R^2
dt = read.csv('delivery-time-gma.csv')
names(dt)
dt.lm1 = lm(dtime~num_cases+distance, data = dt)
sum1 = summary(dt.lm1)
names(sum1)
sum1$r.squared #0.9595937
tr = read.csv('Trucks.csv')
names(tr)
head(tr)
# "Full-Size Pickup" "Small Pickup"     "Sport Utility"
tr$retailprice = as.numeric(gsub(',', '', tr$retailprice))
head(tr)
tr.lm = lm(resaleval~type+retailprice, data = tr)
tr.lm = step(tr.lm)
summary(tr.lm)
hr = read.csv('house-rents-area.csv')
head(hr)
names(hr)
hr.lm = lm(rentalrates~age+expenses+vac_rate+squarefeet+area, data = hr)
hr.lm = step(hr.lm)
summary(hr.lm)
predict(hr.lm, data.frame(age = 5, expenses = 10, squarefeet=10000, area='C'))
# 95% CI for the regression coefficient.
confint(hr.lm)
head(hr)
?scale
# to find the relative importance of data, we scale the data.
hr1 = read.csv('house-rents-area.csv')
head(hr_new)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet)
names(hr_new)
hr_new1 = scale(hr_new)
typeof(hr_new)
typeof(hr_new1)
hr_new1
hr_new1 = as.data.frame(hr_new1)
hr_new1 = as.data.frame(hr_new1)
typeof(hr_new1)
hr1.lm.s = lm(hr1.rentalrates~., data = hr_new1)
hr1.lm.s = step(hr1.lm.s)
summary(hr1.lm.s)
# to find the relative importance of data, we scale the data.
hr1 = read.csv('house-rents-area.csv')
head(hr_new)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet)
names(hr_new)
hr_new1 = scale(hr_new)
head(hr_new1)
names(hr_new)
head(hr_new)
head(hr_new1)
hr_new2 = as.data.frame(hr_new1)
head(hr_new2)
# to find the relative importance of data, we scale the data.
hr1 = read.csv('house-rents-area.csv')
head(hr_new)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet)
names(hr_new)
names(hr_new)
A=lm(hr1.rentalrates~., data = hr_new)
summary(A)
hr_new1 = scale(hr_new)
hr_new2 = as.data.frame(hr_new1)
hr1.lm.s = lm(hr1.rentalrates~., data = hr_new1)
# to find the relative importance of data, we scale the data.
hr1 = read.csv('house-rents-area.csv')
head(hr_new)
hr_new = data.frame(hr1$rentalrates, hr1$age, hr1$expenses, hr1$vac_rate, hr1$squarefeet)
names(hr_new)
hr_new1 = scale(hr_new)
hr_new2 = as.data.frame(hr_new1)
hr1.lm.s = lm(hr1.rentalrates~., data = hr_new1)
hr1.lm.s = step(hr1.lm.s)
summary(hr1.lm.s)
setwd("~/Downloads")
list.files()
eco = read.csv('Group 7_Sales_of_MOMO_Eco.csv')
eco1 = eco[, -1]
names(eco1)
eco1.lm = lm(sales~., data = eco1)
eco1.lm.s = step(eco1)
eco1.lm.s = step(eco1.lm)
summary(eco1.lm.s)
summary(eco1.lm.s)
?poly
getwd()
auto  =  read.csv('R-testing,datasets/auto.csv')
a= c('12','23','33')
a
as.numeric(a)
a= c('12','23','33', 'rt')
as.numeric(a)
b=as.numeric(a)
b
a= factor(c('12','23','33'))
a
str(a)
b=as.numeric(a)
b
a
b=as.character(a)
b
c=as.numeric(b)
c
getwd()
mu = read.csv('Machine-Utilization.csv')
setwd("~/Downloads/R-testing")
mu = read.csv('Machine-Utilization.csv')
names(mu)
mu$Utilization = 1 - mu$Percent.Idle
head(mu)
head(mu,10)
str(mu)
mu$posixTime = as.POSIXct(mu$Timestamp, format = '%d/%m/%Y %H:%M'
)
head(mu,10)
str(mu)
# remove TimeStamp column
mu$Timestamp = NULL
head(mu,12)
# rearrange columns
mu = mu[, c(4,1,2,3)]
head(mu,12)
# filter for RL1
RL1 = mu[mu$Machine=='RL1',]
str(RL1)
summary(RL1)
# still can other machines with 0, remove that as well
RL1$Machine = factor(RL1$Machine)
summary(RL1)
mu_stats = c(min(RL1$Utilization, na.rm = T), max(RL1$Utilization, na.rm = T),
median(RL1$Utilization, na.rm = T))
mu_stats
mu_stats = c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T)
max(RL1$Utilization, na.rm = T),
)
mu_stats
mu_stats = c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T),
max(RL1$Utilization, na.rm = T)
)
mu_stats
mu_under_90 = length(which(RL1$Utilization <  0.90)) > 0; mu_under_90
list_RL1 = list('RL1', mu_stats, mu_under_90); list_RL1
# name components of list
names(list_RL1)
names(list_RL1) = c('Machine', 'Stats', 'Low Threshold')
names(list_RL1)
list_RL1
names(list_RL1) = c('Machine', 'Stats', 'LowThreshold')
list_RL1
# another way to give names
list_RL1_new = list(Machine='RL1', Stats=mu_stats, LowThreshold=mu_under_90); list_RL1_new
# Extract components of list
list_RL1[1]
# Extract components of list
list_RL1[1]
list_RL1[[1]]
typeof(list_RL1[[1]])
typeof(list_RL1[1])
list_RL1$Machine # give the actual item
list_RL1[[2]]
list_RL1[[2]][1]
# add/delete compoent to list
list_RL1[4] = 'New Information'; list_RL1
summary(RL1) # now we have only RL1
# add the hours where the utilization is unknown
list_RL1$Unknownhours = RL1[is.na(RL1$Utilization), 'posixTime']
list_RL1
list_RL1_new[40] = 'New Information'; list_RL1_new
list_RL1
# add/delete compoent to list
list_RL1[4] = 'New Information'; list_RL1
# delete
list_RL1[4] = NULL; list_RL1
# add data frame
list_RL1$Data = RL1
# add data frame
list_RL1$Data = RL1; list_RL1
summary(list_RL1)
str(list_RL1)
list_RL1$Unknownhours
list_RL1$Unknownhours[1]
list_RL1[[4]][1]
list_RL1[1:3]
#subsetting list
list_RL1[1:3]
list_RL1[c(1,4)]
list_RL1[c('Machine','Stats')]
list_RL1[c('Machine','stats')]
list_RL1[c('Machine','Stats')]
sublist = list_RL1[c('Machine','Stats')]; sublist[[2]][2]
# Build TimeSeries Plot
library(ggplot2)
p = ggplot(data = mu);p
names(mu)
p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2)
p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2)+
facet_grid(Machine~.)
p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, colour='Grey', size=1.2)
p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, colour='Grey', size=1.2,linetype=3)
myplot =  p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90, colour='Grey', size=1.2,linetype=3)
list_RL1$Plot = myplot; list_RL1
summary(list_RL1); str(list_RL1)
?linetype
myplot =  p + geom_line(aes(x=posixTime, y=Utilization,colour=Machine), size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90, colour='Grey', size=1.2,linetype=3)
myplot
myplot
RL1
list_RL1
list.files()
chicago = read.csv('/Weather Data/Chicago-F.csv')
getwd()
chicago = read.csv('/WeatherData/Chicago-F.csv')
chicago = read.csv('WeatherData/Chicago-F.csv')
chicago
chicago = read.csv('WeatherData/Chicago-F.csv', row.names = 1)
chicago
houston = read.csv('WeatherData/Houston-F.csv', row.names = 1)
houston
ny = read.csv('WeatherData/NewYork-F.csv', row.names = 1)
ny
sf = read.csv('WeatherData/SanFrancisco-F.csv', row.names = 1)
sf
chicago = as.matrix(chicago)
chicago = as.matrix(chicago)
houston = as.matrix(houston)
ny = as.matrix(ny)
sf = as.matrix(sf)
# put this in list
weather = list(chicago=chicago, houston=houston, ny=ny, sf=sf)
weather
